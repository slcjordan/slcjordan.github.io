<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jordan Crabtree</title>
    <link>http://slcjordan.github.io/</link>
    <description>Recent content on Jordan Crabtree</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>slcjordan.github.io is licensed under the terms of the &lt;a href=&#34;http://github.com/slcjordan/slcjordan.github.io/blob/master/LICENSE.md&#34;&gt;MIT license&lt;/a&gt;</copyright>
    <lastBuildDate>Fri, 17 Mar 2017 21:46:31 -0700</lastBuildDate>
    
	<atom:link href="http://slcjordan.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Short Survey of PProf Visualization Tools</title>
      <link>http://slcjordan.github.io/posts/pprof/</link>
      <pubDate>Fri, 17 Mar 2017 21:46:31 -0700</pubDate>
      
      <guid>http://slcjordan.github.io/posts/pprof/</guid>
      <description>&lt;p&gt;Debugging CPU related issues can often lead to nuanced questions about trends. Does the heap usage spike or grow gradually? Where is this routine being called from and how often?
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Introduction to Actors in Go</title>
      <link>http://slcjordan.github.io/posts/actors/</link>
      <pubDate>Tue, 25 Aug 2015 21:46:37 -0700</pubDate>
      
      <guid>http://slcjordan.github.io/posts/actors/</guid>
      <description>&lt;p&gt;Among the many challenges that multi-threaded programming can present is that of the dreaded race condition. Race conditions occur when a thread modifies state and another thread accesses that state without any synchronization events. Actors avoid race conditions by assigning a single thread to act on behalf of other threads to modify state.
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>